COMPILER D2

	//public DNode ModuleNode=new DNode(FieldType.Root);
	public List<string> Imports=new List<string>();

/*--------------------------------------------------------------------------*/
CHARACTERS
  tab                = '\u0009'. /*  9 = tabulator */
  eol                = '\u000a'. /* 10 = line feed */
  cr                 = '\u000d'. /* 13 = carriage return */
  newLine            = cr + eol. /* Line separator character (U+2028) + Paragraph separator character (U+2029) */

  startLetter        = 'A' .. 'Z' + 'a' .. 'z' + '_' + '\u00aa' + '\u00b5' + '\u00ba' + '\u00c0' .. '\u00d6' + '\u00d8' .. '\u00f6' + '\u00f8' .. '\u00ff'.
  partLetter         = '0' .. '9' + 'A' .. 'Z' + 'a' .. 'z' + '_' + '\u0080' + '\u00a0' .. '\u00b3' + '\u00b5' + '\u00ba' + '\u00c0' .. '\u00d6' + '\u00d8' .. '\u00f6' + '\u00f8' .. '\u00ff'.

  digit              = "0123456789".
  hexDigit           = digit + "ABCDEFabcdef".
  notDigit           = ANY - digit.

  char               = ANY - "'" - '\\' - newLine.
  verbatimStringChar = ANY - '"'.
  regularStringChar  = ANY - '"' - '\\' - newLine.
  notNewLine         = ANY - newLine .
  ws                 = " " + tab + '\u000b' + '\u000c'. /* Any character with Unicode class Zs */


TOKENS
  Identifier =
    ['@']
    ( startLetter
    | '\\'
      ( 'u' hexDigit hexDigit hexDigit hexDigit
      | 'U' hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit
      )
    )
    { partLetter
    | '\\'
      ( 'u' hexDigit hexDigit hexDigit hexDigit
      | 'U' hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit
      )
    }.
  /*--------------------------------------------------------------------------------*/
  Integer =
    digit {digit} | digit {digit} CONTEXT ("." notDigit)
    | ("0x" | "0X") hexDigit {hexDigit}.

	FloatLiteral=
    "." digit {digit}
    [("e" | "E") ["+" | "-"] digit {digit}]
    ["F" | "f" | "D" | "d" | "M" | "m"]
  | digit {digit}
    ( "." digit {digit}
      [("e" | "E" ) ["+" | "-"] digit {digit} ]
      ["F" | "f" | "D" | "d" | "M" | "m"]
    | ("e" | "E") ["+" | "-"] digit {digit}
      ["F" | "f" | "D" | "d" | "M" | "m"]
    | "F" | "f" | "D" | "d" | "M" | "m"
    ).
  /*--------------------------------------------------------------------------------*/
  CharLiteral =
    "'" ( char
        | "\\\'" | "\\\"" | "\\\\" | "\\0" | "\\a" | "\\b" | "\\f" | "\\n" | "\\r" | "\\t" | "\\v"
        | "\\x" hexDigit [hexDigit] [hexDigit] [hexDigit]
        | "\\u" hexDigit hexDigit hexDigit hexDigit
        | "\\U" hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit
        )
    "'".
  /*--------------------------------------------------------------------------------*/
  StringLiteral =
    "\""  { regularStringChar
          | "\\\'" | "\\\"" | "\\\\" | "\\0" | "\\a" | "\\b" | "\\f" | "\\n" | "\\r" | "\\t" | "\\v"
          | "\\x" hexDigit [hexDigit] [hexDigit] [hexDigit]
          | "\\u" hexDigit hexDigit hexDigit hexDigit
          | "\\U" hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit
          }
    "\""
  | "r\"" {verbatimStringChar | "\"\""} "\"".


/*--- Operators and special symbols ---*/

	DivAss="/=".
	Dot=".".
	DblDot="..".
	TrplDot="...".
	BitAnd="&".
	BitAndAss="&=".
	And="&&".
	BitOr="|".
	BitOrAss="|=".
	Or="||".
	Minus="-".
	MinusAss="-=".
	Decr="--".
	Plus="+".
	PlusAss="+=".
	Incr="++".
	Lt="<".
	LtAss="<=".
	BinLt="<<".
	BinLtAss="<<=".
	Uneq="<>".
	UneqAss="<>=".
	Gt=">".
	GtAss=">=".
	BinGtAss=">>=".
	BinGt2Ass=">>>=".
	BinGt=">>".
	BinGt2=">>>".
	Not="!".
	NotAss="!=".
	NotUneq="!<>".
	NotUneqAss="!<>=".
	NotLt="!<".
	NotLtAss="!<=".
	NotGt="!>".
	NotGtAss="!>=".
	OpenRound="(".
	CloseRound=")".
	OpenSq="[".
	CloseSq="]".
	OpenCurly="{".
	CloseCurly="}".
	QuestionMark="?".
	Comma=",".
	Semicolon=";".
	Colon=":".
	Dollar="$".
	Assign="=".
	Equals="==".
	Times="*".
	TimesAss="*=".
	Mod="%".
	ModAss="%=".
	Pow="^".
	PowAss="^=".
	Tilde="~".
	TildeAss="~=".

  /*----- keyword names needed in LL(1) resolvers -----*/


	abstract ="abstract".
	alias="alias".
	align="align".
	asm="asm".
	assert="assert".
	auto="auto".

	body="body".
	bool="bool".
	break="break".
	byte="byte".

	case="case".
	cast="cast".
	catch="catch".
	cdouble="cdouble".
	cent="cent".
	cfloat="cfloat".
	char="char".
	class="class".
	const="const".
	continue="continue".
	creal="creal".

	dchar="dchar".
	debug="debug".
	default="default".
	delegate="delegate".
	delete="delete".
	deprecated="deprecated".
	do="do".
	double="double".

	else="else".
	enum="enum".
	export="export".
	extern="extern".

	false="false".
	final="final".
	finally="finally".
	float="float".
	for="for".
	foreach="foreach".
	foreach_reverse="foreach_reverse".
	function="function".

	goto="goto".

	idouble="idouble".
	if="if".
	ifloat="ifloat".
	immutable="immutable".
	import="import".
	in="in".
	inout="inout".
	int="int".
	interface="interface".
	invariant="invariant".
	ireal="ireal".
	is="is".

	lazy="lazy".
	long="long".

	macro="macro".
	mixin="mixin".
	module="module".

	new="new".
	nothrow="nothrow".
	null="null".

	out="out".
	override="override".

	package="package".
	pragma="pragma".
	private="private".
	protected="protected".
	public="public".
	pure="pure".

	real="real".
	ref="ref".
	return="return".

	scope="scope".
	shared="shared".
	short="short".
	static="static".
	struct="struct".
	super="super".
	switch="switch".
	synchronized="synchronized".

	template="template".
	this="this".
	throw="throw".
	true="true".
	try="try".
	typedef="typedef".
	typeid="typeid".
	typeof="typeof".

	ubyte="ubyte".
	ucent="ucent".
	uint="uint".
	ulong="ulong".
	union="union".
	unittest="unittest".
	ushort="ushort".

	version="version".
	void="void".
	volatile="volatile".

	wchar="wchar".
	while="while".
	with="with".

  /*----- operators and special characters needed in LL(1) resolvers --------------*/



COMMENTS FROM "/*" TO "*/"
COMMENTS FROM "/+" TO "+/" NESTED
COMMENTS FROM "//" TO eol

IGNORE cr+eol + tab



PRODUCTIONS

/*-- Basic program idea --*/
D2 = {Module| Statement | TemplateMixinDeclaration | VersionSpecification | DebugSpecification}.



/*------------------------------------------- Lexical ----------------------------------------------*/

IntegerLiteral=
	Integer ["U" | "u" | "L" | "l" | "UL" | "Ul" | "uL" | "ul" | "LU" | "Lu" | "lU" | "lu"].



/*----------------------------------- Modules -------------------------------------*/

Module=
	[ModuleDeclaration] DeclDefs.

DeclDefs=
	DeclDef [DeclDefs].

DeclDef=
	AttributeSpecifier|
	ImportDeclaration|
	EnumDeclaration|
	ClassDeclaration|
	InterfaceDeclaration|
	AggregateDeclaration|
	Declaration|
	Constructor|
	Destructor|
	Invariant|
	UnitTest|
	StaticConstructor|
	StaticDestructor|
	SharedStaticConstructor|
	SharedStaticDestructor|
	ConditionalDeclaration|
	StaticAssert|
	TemplateDeclaration|
	TemplateMixin|
	MixinDeclaration|
	";".


ModuleDeclaration=
	module ModuleFullyQualifiedName ";".

ModuleFullyQualifiedName=
	{Identifier "."} Identifier.

ImportDeclaration=
	[static] import ImportList ";".

ImportList=
	Import ["," ImportList]|
	ImportBindings.

Import=
	[Identifier "="] ModuleFullyQualifiedName.

ImportBindings=
	Import ":" ImportBindList.

ImportBindList=
	ImportBind ["," ImportBindList].

ImportBind=
	Identifier ["=" Identifier].


MixinDeclaration=
    mixin "(" AssignExpression ")" ";".



/*----------------------------------- Declarations -------------------------------------*/

Declaration=
        ["alias"] ({StorageClass} Decl|StorageClass {StorageClass} Identifier "=" AssignExpression ";" /* Auto declaration */ ).

Decl=
        BasicType (Declarators ";" |Declarator FunctionBody).

Declarators=
        DeclaratorInitializer {"," DeclaratorIdentifier}.

DeclaratorInitializer=
        Declarator "=" Initializer.

DeclaratorIdentifier=
        Identifier ["=" Initializer].

BasicType=
        BasicTypeX |
        "." IdentifierList |
        IdentifierList |
        Typeof|
        Typeof "." IdentifierList|
        (const | immutable | shared | inout) "(" Type ")".

BasicTypeX=
        bool|
        byte|
        ubyte|
        short|
        ushort|
        int|
        uint|
        long|
        ulong|
        char|
        wchar|
        dchar|
        float|
        double|
        real|
        ifloat|
        idouble|
        ireal|
        cfloat|
        cdouble|
        creal|
        void.

BasicType2=
        "*"|
        "[" ([AssignExpression [".." AssignExpression]] | Type) "]"|
        (delegate|function) Parameters [FunctionAttributes].

Declarator=
        [BasicType2] Identifier [DeclaratorSuffixes].

DeclaratorSuffixes=
        DeclaratorSuffix [DeclaratorSuffixes].

DeclaratorSuffix=
        "[" [AssignExpression|Type] "]"|
        [TemplateParameterList] Parameters [MemberFunctionAttributes].

IdentifierList=
        (TemplateInstance | Identifier) ["." IdentifierList].

StorageClass=
        abstract|
        auto|
        const|
        deprecated|
        extern|
        final|
        immutable|
        inout|
        shared|
	nothrow|
        override|
	pure|
        scope|
        static|
        synchronized.

Type=
        BasicType [Declarator2].

Declarator2=
        BasicType2 [Declarator2]|
        "(" Declarator2 ")" [DeclaratorSuffixes].

Parameters=
	"(" [ParameterList] ")".

ParameterList=
        Parameter ["," ParameterList]|
        [Parameter] "...".

Parameter=
        [InOut] Declarator ["=" DefaultInitializerExpression].

InOut=
        in|
        out|
        ref|
        lazy.

FunctionAttributes=
	FunctionAttribute [FunctionAttributes].

FunctionAttribute=
	nothrow|
	pure.

MemberFunctionAttributes=
	MemberFunctionAttribute [ MemberFunctionAttributes].

MemberFunctionAttribute=
	const|
	immutable|
	inout|
	shared|
	FunctionAttribute.

DefaultInitializerExpression=
	AssignExpression|
	"__FILE__"|
	"__LINE__".

Initializer=
        VoidInitializer|
	NonVoidInitializer.

NonVoidInitializer=
        AssignExpression|
        ArrayInitializer|
        StructInitializer.

ArrayInitializer=
	"[" [ArrayMemberInitializations] "]".

ArrayMemberInitializations=
	ArrayMemberInitialization ["," ArrayMemberInitializations].

ArrayMemberInitialization=
	NonVoidInitializer|
	AssignExpression ":" NonVoidInitializer.

StructInitializer=
	"{" [StructMemberInitializers] "}".

StructMemberInitializers=
	StructMemberInitializer ["," StructMemberInitializers].

StructMemberInitializer=
	NonVoidInitializer|
	Identifier ":" NonVoidInitializer.


Typeof=
        typeof "(" (Expression|return) ")".

VoidInitializer=
	void.



/*----------------------------------- Attributes -------------------------------------*/



AttributeSpecifier=
    Attribute (":" | DeclarationBlock).

Attribute=
    LinkageAttribute|
    AlignAttribute|
    Pragma|
    deprecated|
    ProtectionAttribute|
    static|
    final|
    override|
    abstract|
    const|
    auto|
    scope|
  "__gshared"|
    shared|
    immutable|
    inout|
    "@" ("disable" | "property" | "safe").


DeclarationBlock=
    DeclDef|
    "{" [DeclDefs] "}".

LinkageAttribute=
	extern ["(" LinkageType ")"].

LinkageType=
	"C"|
	"C++"|
	"D"|
	"Windows"|
	"Pascal"|
	"System".

AlignAttribute=
	align ["(" Integer ")"].

ProtectionAttribute=
    private|
    package|
    protected|
    public|
    export.


/*----------------------------------- Pragmas -------------------------------------*/

Pragma=
    pragma "(" Identifier ["," ArgumentList] ")".



/*----------------------------------- Expressions -------------------------------------*/


Expression=
	AssignExpression ["," Expression].

AssignExpression=
	ConditionalExpression [("="|"+="|"-="|"*="|"/="|"%="| "&=" | "|="|"^="|"~="|"<<="|">>="|">>>="|"^^=") AssignExpression].

ConditionalExpression=
	OrOrExpression ["?" Expression ":" ConditionalExpression].

OrOrExpression=
	[OrOrExpression "||"] AndAndExpression.

AndAndExpression=
	[AndAndExpression "&&"] OrExpression.

OrExpression=
	[OrExpression "|"] XorExpression.

XorExpression=
	[XorExpression "^"] AndExpression.

AndExpression=
	[AndExpression "&"] CmpExpression.

CmpExpression=
	ShiftExpression|
	EqualExpression|
	IdentityExpression|
	RelExpression|
	InExpression.

EqualExpression=
	ShiftExpression ("!="|"==") ShiftExpression.

IdentityExpression=
	ShiftExpression ["!"] "is" ShiftExpression.

RelExpression=
	ShiftExpression ("<"|"<=" |">"|">="|"!<>="|"!<>"|"<>"|"<>="|"!>"|"!>="|"!<"|"!<=") ShiftExpression.

InExpression=
	ShiftExpression ["!"] "in" ShiftExpression.

ShiftExpression=
	AddExpression|
	ShiftExpression ("<<"|">>"|">>>") AddExpression.

AddExpression=
	MulExpression|
	AddExpression ("+"|"-") MulExpression|
	CatExpression.

CatExpression=
	AddExpression "~" MulExpression.

MulExpression=
	PowExpression|
	MulExpression ("*"|"/"|"%") PowExpression.

PowExpression=
	UnaryExpression ["^^" PowExpression].

UnaryExpression=
	PostfixExpression|
	("&"|"++"|"--"|"*"|"-"|"+" |"!" |"~") UnaryExpression|
	"(" Type ")" "." Identifier|
	NewExpression|
	DeleteExpression|
	CastExpression|
	NewAnonClassExpression.

NewExpression=
	NewArguments Type ["[" AssignExpression "]"|"(" ArgumentList ")"]|
	NewArguments ClassArguments [BaseClassList] "{" DeclDefs "}".

NewArguments=
	new ["(" [ArgumentList] ")"].

ClassArguments=
	class ["(" [ArgumentList] ")"].

ArgumentList=
	AssignExpression ["," ArgumentList].

DeleteExpression=
	delete UnaryExpression.

CastExpression=
	cast "(" Type ")" UnaryExpression.

PostfixExpression=
	PrimaryExpression|
	PostfixExpression "." (Identifier|NewExpression)|
	PostfixExpression ("++"|"--")|
	PostfixExpression "(" [ArgumentList] ")"|
	IndexExpression|
	SliceExpression.

IndexExpression=
	PostfixExpression "[" ArgumentList "]".

SliceExpression=
	PostfixExpression "[" [AssignExpression ".." AssignExpression] "]".

PrimaryExpression=
	["."] Identifier|
	TemplateInstance|
	this|
	super|
	null|
	true|
	false|
	"$"|
	"__FILE__"|
	"__LINE__"|
	Integer|
	FloatLiteral|
	CharLiteral|
	StringLiterals|
	ArrayLiteral|
	AssocArrayLiteral|
	FunctionLiteral|
	AssertExpression|
	MixinExpression|
	ImportExpression|
	BasicType "." Identifier|
	Typeof|
	TypeidExpression|
	IsExpression|
	"(" Expression ")"|
	TraitsExpression.

StringLiterals=
	[StringLiterals] StringLiteral.

ArrayLiteral=
	"[" ArgumentList "]".


AssocArrayLiteral=
	"[" KeyValuePairs "]".

KeyValuePairs=
	KeyValuePair ["," KeyValuePairs].

KeyValuePair=
	KeyExpression ":" ValueExpression.

KeyExpression=
	ConditionalExpression.

ValueExpression=
	ConditionalExpression.

FunctionLiteral=
	[(function|delegate) [Type]] [ParameterAttributes] FunctionBody.

ParameterAttributes=
	Parameters [FunctionAttributes].

AssertExpression=
	assert "(" AssignExpression ["," AssignExpression] ")".

MixinExpression=
	mixin "(" AssignExpression ")".

ImportExpression=
	import "(" AssignExpression ")".

TypeidExpression=
    typeid "(" (Type|Expression) ")".

IsExpression=
	is "(" Type [Identifier] [(":"|"==") TypeSpecialization] ["," TemplateParameterList] ")".

TypeSpecialization=
	Type|
	struct|
	union|
	class|
	interface|
	enum|
	function|
	delegate|
	super|
	const|
	immutable|
	inout|
	shared|
	return.



/*----------------------------------- Statements -------------------------------------*/



Statement=
    ";"|
    NonEmptyStatement|
    ScopeBlockStatement.

NoScopeNonEmptyStatement=
    NonEmptyStatement|
    BlockStatement.

NoScopeStatement=
    ";"|
    NonEmptyStatement|
    BlockStatement.

NonEmptyOrScopeBlockStatement=
    NonEmptyStatement|
    ScopeBlockStatement.

NonEmptyStatement=
    LabeledStatement|
    ExpressionStatement|
    DeclarationStatement|
    IfStatement|
    WhileStatement|
    DoStatement|
    ForStatement|
    ForeachStatement|
    SwitchStatement|
    FinalSwitchStatement|
    CaseStatement|
    CaseRangeStatement|
    DefaultStatement|
    ContinueStatement|
    BreakStatement|
    ReturnStatement|
    GotoStatement|
    WithStatement|
    SynchronizedStatement|
    TryStatement|
    ScopeGuardStatement|
    ThrowStatement|
    AsmStatement|
    PragmaStatement|
    MixinStatement|
    ForeachRangeStatement|
    ConditionalStatement|
    StaticAssert|
    TemplateMixin.

ScopeStatement=
    NonEmptyStatement|
    BlockStatement.

ScopeBlockStatement=
    BlockStatement.

LabeledStatement=
    Identifier ":" NoScopeStatement.


BlockStatement=
    "{" {Statement} "}".


ExpressionStatement=
    Expression ";".

DeclarationStatement=
    Declaration.

IfStatement=
	if "(" IfCondition ")" ScopeStatement [else ScopeStatement].

IfCondition=
	Expression|
	auto Identifier "=" Expression|
	Declarator "=" Expression.

WhileStatement=
    while "(" Expression ")" ScopeStatement.

DoStatement=
    do ScopeStatement while "(" Expression ")".



ForStatement=
	for "(" Initialize [Expression] ";" [Expression] ")" ScopeStatement.

Initialize=
	";"|
	NoScopeNonEmptyStatement.


ForeachStatement=
    Foreach "(" ForeachTypeList ";" Expression ")" NoScopeNonEmptyStatement.

Foreach=
    foreach|
    foreach_reverse.

ForeachTypeList=
    ForeachType ["," ForeachTypeList].

ForeachType=
    [ref] [Type] Identifier.


SwitchStatement=
	switch "(" Expression ")" ScopeStatement.

CaseStatement=
	case ArgumentList ":" Statement.

CaseRangeStatement=
	case FirstExp ":" ".." case LastExp ":" Statement.

FirstExp=
	AssignExpression.

LastExp=
	AssignExpression.

DefaultStatement=
	default ":" Statement.



FinalSwitchStatement=
	final switch "(" Expression ")" ScopeStatement.


ContinueStatement=
    continue [Identifier] ";".


BreakStatement=
    break [Identifier] ";".


ReturnStatement=
    return [Expression] ";".



GotoStatement=
    goto (Identifier|default|case [Expression]) ";".


WithStatement=
	with "(" (Expression|Symbol|TemplateInstance) ")" ScopeStatement.


SynchronizedStatement=
    synchronized ["(" Expression ")"] ScopeStatement.


TryStatement=
	try ScopeStatement [Catches] [FinallyStatement].

Catches=
	LastCatch|
	{Catch}.

LastCatch=
	catch NoScopeNonEmptyStatement.

Catch=
	catch "(" CatchParameter ")" NoScopeNonEmptyStatement.

CatchParameter=
	BasicType Identifier.

FinallyStatement=
	finally NoScopeNonEmptyStatement.


ThrowStatement=
	throw Expression ";".

ScopeGuardStatement=
	scope "(" ("exit"|"success"|"failure") ")" NonEmptyOrScopeBlockStatement.



AsmStatement=
	asm "{" {Identifier|IntegerLiteral|FloatLiteral|StringLiteral|CharLiteral|","|";"} "}".

PragmaStatement=
    Pragma NoScopeStatement.


MixinStatement=
    mixin "(" AssignExpression ")" ";".


ForeachRangeStatement=
    Foreach "(" ForeachType ";" Expression ".." Expression ")" ScopeStatement.



/*----------------------------------- Struct & Unions -------------------------------------*/



AggregateDeclaration=
	(struct|union) Identifier (StructBody|";")|
	StructTemplateDeclaration|
	UnionTemplateDeclaration.

StructBody=
	"{" [StructBodyDeclarations] "}".

StructBodyDeclarations=
	StructBodyDeclaration [StructBodyDeclarations].

StructBodyDeclaration=
	Declaration|
	StaticConstructor|
	StaticDestructor|
	Invariant|
	UnitTest|
	StructAllocator|
	StructDeallocator|
	StructConstructor|
	StructPostblit|
	StructDestructor|
	AliasThis.


StructAllocator=
	ClassAllocator.

StructDeallocator=
	ClassDeallocator.

StructConstructor=
    this "(" ParameterList ")" FunctionBody.

StructPostblit=
    this "(" this ")" FunctionBody.

StructDestructor=
    "~" this "(" ")" FunctionBody.



/*----------------------------------- Classes -------------------------------------*/




ClassDeclaration=
	class Identifier [BaseClassList] ClassBody|
	ClassTemplateDeclaration.

BaseClassList=
	":" (SuperClass ["," InterfaceClasses]| InterfaceClass).

SuperClass=
	[Protection] Identifier.

InterfaceClasses=
	InterfaceClass ["," InterfaceClasses].

InterfaceClass=
	[Protection] Identifier.

Protection=
	private|
	package|
	public|
	export.

ClassBody=
	"{" [ClassBodyDeclarations] "}".

ClassBodyDeclarations=
	ClassBodyDeclaration [ClassBodyDeclarations].

ClassBodyDeclaration=
	Declaration|
	Constructor|
	Destructor|
	StaticConstructor|
	StaticDestructor|
	Invariant|
	UnitTest|
	ClassAllocator|
	ClassDeallocator.


Constructor=
	this Parameters FunctionBody.

Destructor=
	"~" this "(" ")" FunctionBody.

StaticConstructor=
	static this "(" ")" FunctionBody.

StaticDestructor=
	static "~" this "(" ")" FunctionBody.

SharedStaticConstructor=
	shared static this "(" ")" FunctionBody.

SharedStaticDestructor=
	shared static "~" this "(" ")" FunctionBody.

Invariant=
	invariant "(" ")" BlockStatement.

ClassAllocator=
	new Parameters FunctionBody.

ClassDeallocator=
	delete Parameters FunctionBody.

AliasThis=
	alias Identifier this ";".


NewAnonClassExpression=
    new [PerenArgumentList] class [PerenArgumentList] [SuperClass] [InterfaceClasses] ClassBody.

PerenArgumentList=
    "(" ArgumentList ")".





/*----------------------------------- Interfaces -------------------------------------*/




InterfaceDeclaration=
	interface Identifier  InterfaceBody|
	InterfaceTemplateDeclaration.

BaseInterfaceList=
	":" InterfaceClasses.

InterfaceBody=
	"{" DeclDefs "}".




/*----------------------------------- Enums -------------------------------------*/




EnumDeclaration=
	enum [Identifier] [":" Type] EnumBody.

EnumBody=
	";"|
	"{" EnumMember {"," [EnumMember]} "}".

EnumMember=
	[Type] Identifier ["=" AssignExpression].



/*----------------------------------- Functions -------------------------------------*/



FunctionBody=
	BlockStatement|
	BodyStatement|
	InStatement BodyStatement|
	OutStatement BodyStatement|
	InStatement OutStatement BodyStatement|
	OutStatement InStatement BodyStatement.

InStatement=
	in BlockStatement.

OutStatement=
	out ["(" Identifier ")"] BlockStatement.

BodyStatement=
	body BlockStatement.




/*----------------------------------- Templates -------------------------------------*/




TemplateDeclaration=
	template TemplateIdentifier "(" TemplateParameterList ")" [Constraint]
		"{" DeclDefs "}".

Constraint=
    if "(" Expression ")".

TemplateIdentifier=
	Identifier.

TemplateParameterList=
	TemplateParameter ["," TemplateParameterList].

TemplateParameter=
	TemplateTypeParameter|
	TemplateValueParameter|
	TemplateAliasParameter|
	TemplateTupleParameter|
	TemplateThisParameter.

TemplateInstance=
	TemplateIdentifier "!" ( "(" TemplateArgumentList ")" | TemplateSingleArgument).


TemplateArgumentList=
	TemplateArgument ["," TemplateArgumentList].

TemplateArgument=
	Type|
	AssignExpression|
	Symbol.

Symbol=
	["."] SymbolTail.

SymbolTail=
	(Identifier | TemplateInstance) ["." SymbolTail].

TemplateSingleArgument=
	Identifier|
	BasicTypeX|
	CharLiteral|
	StringLiteral|
	IntegerLiteral|
	FloatLiteral|
	true|
	false|
	null|
	"__FILE__"|
	"__LINE__".


TemplateTypeParameter=
	Identifier [TemplateTypeParameterSpecialization] [TemplateTypeParameterDefault].

TemplateTypeParameterSpecialization=
	 ":" Type.

TemplateTypeParameterDefault=
	 "=" Type.


TemplateThisParameter=
	this TemplateTypeParameter.


TemplateValueParameter=
    Declaration [TemplateValueParameterSpecialization] [TemplateValueParameterDefault].

TemplateValueParameterSpecialization=
    ":" ConditionalExpression.

TemplateValueParameterDefault=
    "=" ( "__FILE__"| "__LINE__"|ConditionalExpression).



TemplateAliasParameter=
    alias Identifier [TemplateAliasParameterSpecialization] [TemplateAliasParameterDefault].

TemplateAliasParameterSpecialization=
     ":" Type.

TemplateAliasParameterDefault=
     "=" Type.


TemplateTupleParameter=
	Identifier "...".


ClassTemplateDeclaration=
    class Identifier "(" TemplateParameterList ")" BaseClassList ClassBody.



StructTemplateDeclaration=
    struct Identifier "(" TemplateParameterList ")" [Constraint] StructBody.

UnionTemplateDeclaration=
    union Identifier "(" TemplateParameterList ")" [Constraint] StructBody.

InterfaceTemplateDeclaration=
    interface Identifier "(" TemplateParameterList ")" [Constraint] [BaseInterfaceList] InterfaceBody.




/*----------------------------------- Template Mixins -------------------------------------*/




TemplateMixinDeclaration=
	mixin template TemplateIdentifier "(" TemplateParameterList ")" [Constraint] "{" DeclDefs "}".

TemplateMixin=
	mixin TemplateIdentifier ["!" "(" TemplateArgumentList ")"] MixinIdentifier ";".

MixinIdentifier=
	Identifier.




/*----------------------------------- Conditional Compilation -------------------------------------*/



ConditionalDeclaration=
    Condition (CCDeclarationBlock [else CCDeclarationBlock] | ":" Declaration).

CCDeclarationBlock=
    Declaration|
    "{" {Declaration} "}".

ConditionalStatement=
    Condition NoScopeNonEmptyStatement [else NoScopeNonEmptyStatement].


Condition=
    VersionCondition|
    DebugCondition|
    StaticIfCondition.


VersionCondition=
	version "(" (Integer|Identifier|unittest) ")".


VersionSpecification=
    version "=" (Identifier| Integer) ";".

DebugCondition=
    debug ["(" (Integer|Identifier) ")"].


DebugSpecification=
    debug "=" (Identifier|Integer) ";".


StaticIfCondition=
    static if "(" AssignExpression ")".



StaticAssert=
    static assert "(" AssignExpression ["," AssignExpression] ")" ";".



/*----------------------------------- Traits -------------------------------------*/


TraitsExpression=
    "__traits" "(" TraitsKeyword "," TraitsArgument {"," TraitsArgument} ")".

TraitsKeyword=
    "isAbstractClass"|
    "isArithmetic"|
    "isAssociativeArray"|
    "isFinalClass"|
    "isFloating"|
    "isIntegral"|
    "isScalar"|
    "isStaticArray"|
    "isUnsigned"|
    "isVirtualFunction"|
    "isAbstractFunction"|
    "isFinalFunction"|
    "isStaticFunction"|
    "isRef"|
    "isOut"|
    "isLazy"|
    "hasMember"|
    "identifier"|
    "getMember"|
    "getOverloads"|
    "getVirtualFunctions"|
    "classInstanceSize"|
    "allMembers"|
    "derivedMembers"|
    "isSame"|
    "compiles".

TraitsArgument=
    AssignExpression|
    Type.


/*----------------------------------- Unittests -------------------------------------*/


UnitTest=
	unittest FunctionBody.













END D2.
