/*----------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2, or (at your option) any
later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than
Coco/R itself) does not fall under the GNU General Public License.
----------------------------------------------------------------------*/
-->begin
using System;
using System.Collections.Generic;

-->namespace

public class DTokens{
-->constants
}

public class DParser {
	const bool T = true;
	const bool x = false;
	const int minErrDist = 2;

	/// <summary>
	/// Encapsules whole document structure
	/// </summary>
	DNode doc;
	public DNode Document
        {
            get { return doc; }
        }
	public List<string> import;

	public DLexer lexer;
	public Errors errors = new Errors();

    DToken t
    {
        [System.Diagnostics.DebuggerStepThrough]
        get
        {
            return (DToken)lexer.CurrentToken;
        }
    }

    /// <summary>
    /// lookAhead token
    /// </summary>
    DToken la
    {
        [System.Diagnostics.DebuggerStepThrough]
        get
        {
            return (DToken)lexer.LookAhead;
        }
    }
	int errDist = minErrDist;

-->declarations

	public DParser(DLexer lexer) {
		this.lexer = lexer;
	}

	void SynErr (int n) {
		if (errDist >= minErrDist) {errors.SynErr(la.line, la.col, n);

		//ErrorMsgs.Add(la.line.ToString()+";"+la.col.ToString()+" "+Errors.ErrMsg(n));
		}
		errDist = 0;
	}

	public void SemErr (string msg) {
		if (errDist >= minErrDist)
		{errors.SemErr(t.line, t.col, msg);
		//ErrorMsgs.Add(la.line.ToString()+";"+la.col.ToString()+" "+msg);
		}
		errDist = 0;
	}

	void Get () {
		lexer.NextToken();
-->pragmas
	}

	void Expect (int n) {
		if (la.kind==n) Get(); else { SynErr(n); }
	}

	bool StartOf (int s) {
		return set[s, la.kind];
	}

	void ExpectWeak (int n, int follow) {
		if (la.kind == n) Get();
		else {
			SynErr(n);
			while (!StartOf(follow)) Get();
		}
	}


	bool WeakSeparator(int n, int syFol, int repFol) {
		int kind = la.kind;
		if (kind == n) {Get(); return true;}
		else if (StartOf(repFol)) {return false;}
		else {
			SynErr(n);
			while (!(set[syFol, kind] || set[repFol, kind] || set[0, kind])) {
				Get();
				kind = la.kind;
			}
			return StartOf(syFol);
		}
	}


-->productions

	public void Parse() {
		la = new Token();
		la.val = "";
		Get();
-->parseRoot
    Expect(0);
	}

	static readonly bool[,] set = {
-->initialization
	};
} // end Parser


public class Errors {
	public int count = 0;                                    // number of errors detected
	public System.IO.TextWriter errorStream = Console.Out;   // error messages go to this stream
  public string errMsgFormat = "-- line {0} col {1}: {2}"; // 0=line, 1=column, 2=text

	public static string ErrMsg(int n)
	{
	string s;
		switch (n) {
-->errors
			default: s = "error " + n; break;
		}
		return s;
	}

	public void SynErr (int line, int col, int n) {
		errorStream.WriteLine(errMsgFormat, line, col, ErrMsg(n));
		count++;
	}

	public void SemErr (int line, int col, string s) {
		errorStream.WriteLine(errMsgFormat, line, col, s);
		count++;
	}

	public void SemErr (string s) {
		errorStream.WriteLine(s);
		count++;
	}

	public void Warning (int line, int col, string s) {
		errorStream.WriteLine(errMsgFormat, line, col, s);
	}

	public void Warning(string s) {
		errorStream.WriteLine(s);
	}
} // Errors


public class FatalError: Exception {
	public FatalError(string m): base(m) {}
}

$$$
